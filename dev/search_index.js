var documenterSearchIndex = {"docs":
[{"location":"installation.html#Installation-Guide","page":"Installation Guide","title":"Installation Guide","text":"","category":"section"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"From Julia, PowerModelsDistributionRDT is installed using the built-in package manager:","category":"page"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"]add PowerModelsDistributionRDT","category":"page"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"or equivalently,","category":"page"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"import Pkg\nPkg.add(\"PowerModelsDistributionRDT\")","category":"page"},{"location":"installation.html#Developer-Installation","page":"Installation Guide","title":"Developer Installation","text":"","category":"section"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"To install PowerModelsDistributionRDT as a developer,","category":"page"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"import Pkg\nPkg.develop(Pkg.PackageSpec(; name=\"PowerModelsDistributionRDT\", url=\"https://github.com/lanl-ansi/PowerModelsDistributionRDT.jl\"))","category":"page"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"From the command-line, outside Julia, one could download the repository, either via Github.com, or using git, i.e.,","category":"page"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"git clone https://github.com/lanl-ansi/PowerModelsDistributionRDT.jl.git\ngit checkout tags/v1.0.0","category":"page"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"Then to install PowerModelsDistributionRDT and its required packages","category":"page"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"julia --project=\"path/to/PowerModelsDistributionRDT\" -e 'using Pkg; Pkg.instantiate(); Pkg.precompile();'","category":"page"},{"location":"index.html#PowerModelsDistributionRDT.jl","page":"Introduction","title":"PowerModelsDistributionRDT.jl","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"CurrentModule = PowerModelsDistributionRDT","category":"page"},{"location":"index.html#What-is-PowerModelsDistributionRDT?","page":"Introduction","title":"What is PowerModelsDistributionRDT?","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"PowerModelsDistributionRDT.jl is a Julia/JuMP-based library for designing distribution networks, in particular unbalanced (i.e., multiconductor) power distribution networks.","category":"page"},{"location":"index.html#Resources-for-Getting-Started","page":"Introduction","title":"Resources for Getting Started","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Read the Installation Guide","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Read the Quickstart Guide","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Read the introductory tutorial Introduction to PowerModelsDistributionRDT","category":"page"},{"location":"index.html#How-the-documentation-is-structured","page":"Introduction","title":"How the documentation is structured","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"The following is a high-level overview of how our documentation is structured. There are three primary sections:","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"The Manual contains detailed documentation for certain aspects of PowerModelsDistributionRDT, such as\nTutorials contains working examples of how to use PowerModelsDistributionRDT. Start here if you are new to PowerModelsDistributionRDT.\nThe API Reference contains a complete list of the functions you can use in PowerModelsDistributionRDT. Look here if you want to know how to use a particular function.","category":"page"},{"location":"index.html#PowerModelsDistributionRDT-Analyses-Packages","page":"Introduction","title":"PowerModelsDistributionRDT Analyses Packages","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"PowerModelsDistribution depends on several other PowerModels(...) packages from the InfrastructureModels ecosystem. The packages in blue below are created and maintained by the core InfrastructureModels developer team, and the other packages are those that are built as extensions or rely on one of the core InfrastructureModels packages in some way.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"(Image: InfrastructureModels Ecosystem)","category":"page"},{"location":"index.html#PowerModelsDistribution","page":"Introduction","title":"PowerModelsDistribution","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"PowerModelsDistribution.jl is a Julia/JuMP-based package for modeling unbalanced (i.e., multiconductor) power networks. This is the primary modeling framework utilized in PowerModelsDistributionRDT, and contains the primary logic for optimization and parsing of network data.","category":"page"},{"location":"index.html#PowerModelsONM","page":"Introduction","title":"PowerModelsONM","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"PowerModelsONM.jl is a Julia/JuMP-based package for operation and restoration of electric power distribution feeders featuring networked microgrids. Many of the formulations for optimal operations under extreme events are integrated into the design model of PowerModelDistributionRDT.","category":"page"},{"location":"index.html#License","page":"Introduction","title":"License","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"This code is provided under a BSD license as part of the Multi-Infrastructure Control and Optimization Toolkit (MICOT) project, C15024.","category":"page"},{"location":"manual/quickguide.html#Quick-Start-Guide","page":"Getting Started","title":"Quick Start Guide","text":"","category":"section"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"Once PowerModelsDistributionRDT is installed, to operate PowerModelsDistributionRDT several other things are required, at a minimum, a distribution data set in LPNORM format and an optimization solver like Juniper is needed.  The basic RDT problems can be executed with","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"using PowerModelsDistributionRDT\n\nimport PowerModelsDistribution as _PMD\nimport Ipopt\nimport Juniper\nimport HiGHS\n\n\nipopt_solver = JuMP.optimizer_with_attributes(Ipopt.Optimizer, \"print_level\" => 0, \"sb\" => \"yes\", \"max_iter\" => 1000, \"acceptable_tol\" => 1.0e-2)\nhighs_solver = JuMP.optimizer_with_attributes(HiGHS.Optimizer, \"small_matrix_value\" => 1e-12, \"output_flag\"=>false)\njuniper_solver = JuMP.optimizer_with_attributes(Juniper.Optimizer, \"nl_solver\" => ipopt_solver, \"mip_solver\" => highs_solver, \"log_levels\" => [],)\n\nresult = solve_rdt(\"test/data/small.json\", _PMD.ACPUPowerModel, juniper_solver)","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"where ACPUPowerModel can be replaced with a desired distribution network formulation, typically defined in the PowerModelsDistribution package.","category":"page"},{"location":"manual/quickguide.html#Getting-Results","page":"Getting Started","title":"Getting Results","text":"","category":"section"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"The solve commands in PowerModelsDistributionRDT return detailed results data in the form of a dictionary.  This dictionary can be saved for further processing as follows,","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"result = olve_rdt(\"test/data/small.json\", _PMD.ACPUPowerModel, juniper_solver)","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"For example, the algorithm's runtime and final objective value can be accessed with,","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"result[\"solve_time\"]\nresult[\"objective\"]","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"The \"solution\" field contains detailed information about the solution produced by the solve method. For example, the following dictionary comprehension can be used to inspect the choice to build a new branch in the solution,","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"Dict(name => data[\"ze\"] for (name, data) in result[\"solution\"][\"branch_ne\"])","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"The print_summary(result[\"solution\"]) function can be used show an table-like overview of the solution data.  ","category":"page"}]
}
